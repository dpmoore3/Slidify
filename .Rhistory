i <- solve(data, ...)
x$setInverse(i)
i
}
a <-makeCacheMatrix()       # assigns function to a
x <- matrix(c(4,2,7,6),2,2) # assigns a matrix to x (also tested a 3x3 and it worked)
a$set(x)                    # passes x to the set function
cachesolve(a)               # passes a to cachesolve; cache is null, so calculates inverse at sets it
cachesolve(a)               # passes a to cachesolve; inverse is cached, returns cached inverse matrix
cacheSolve(a)               # passes a to cachesolve; cache is null, so calculates inverse at sets it
rm(list=ls())
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
#This function creates a special "matrix" object that can cache its inverse.
m <- NULL
# Set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# get the value of the matrix
get <- function() x
#solve computes the inverse of a square matrix
setinverse <- function(solve) m <<- solve
# get the inverse
getinverse <- function() m
# A list with set,get,setinverse and getinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
#This function creates a special "matrix" object that can cache its inverse.
m <- NULL
# Set the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
# get the value of the matrix
get <- function() x
#solve computes the inverse of a square matrix
setinverse <- function(solve) m <<- solve
# get the inverse
getinverse <- function() m
# A list with set,get,setinverse and getinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#This function computes the inverse of the special "matrix" returned by
#makeCacheMatrix. If the inverse has already been calculated
#(and the matrix has not changed),
#this function should retrieve the inverse from the cache.
m <- x$getinverse()
#Check to see if the inverse has already been calculated
if(!is.null(m)) {
# get the inverse
message("getting cached data")
#skip the function
return(m)
}
# it calculates the inverse of the data and
#sets the value of the inverse in the cache via the setinverse function.
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a <-makeCacheMatrix()       # assigns function to a
x <- matrix(c(4,2,7,6),2,2) # assigns a matrix to x (also tested a 3x3 and it worked)
a$set(x)                    # passes x to the set function
cacheSolve(a)               # passes a to cachesolve; cache is null, so calculates inverse at sets it
cachesolve(a)               # passes a to cachesolve; inverse is cached, returns cached inverse matrix
rm(list=ls())
## Matrix inversion is usually a costly computation.
## Below is an implementation of a matrix that allows for the
## caching of its inverse and a companion function which computes
## the inverse for this inverse-caching matrix implementation.
## Constructs a matrix which is capable of caching its inverse.
##
## Args
##   x: a matrix that is assumed to be invertible.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Computes the inverse of a cache matrix created by the makeCacheMatrix
## function.
##
## Note that, unlike the 'solve' function, this function takes
## no additional arguments.  Supporting additional arguments
## (such as the 'b' argument, for example) would require much more complex
## caching logic to account for the specific call to cacheSolve that is being
## cached.  As such, only matrix inversion is supported.
##
## Args
##     x : a cache matrix created using the makeCacheMatrix function.
cacheSolve <- function(x) {
inverse <- x$getinverse()
if (!is.null(inverse)) {
message("getting cached inverse")
return(inverse)
}
mat <- x$get()
inverse <- solve(mat)
x$setinverse(inverse)
i
cacheSolve <- function(x) {
inverse <- x$getinverse()
if (!is.null(inverse)) {
message("getting cached inverse")
return(inverse)
}
mat <- x$get()
inverse <- solve(mat)
x$setinverse(inverse)
inverse
}
cacheSolve <- function(x) {
inverse <- x$getinverse()
if (!is.null(inverse)) {
message("getting cached inverse")
return(inverse)
}
mat <- x$get()
inverse <- solve(mat)
x$setinverse(inverse)
inverse
}
a <-makeCacheMatrix()       # assigns function to a
x <- matrix(c(4,2,7,6),2,2) # assigns a matrix to x (also tested a 3x3 and it worked)
a$set(x)                    # passes x to the set function
cacheSolve(a)               # passes a to cachesolve; cache is null, so calculates inverse at sets it
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setcache <- function(cache_value) cache <<- cache_value
getcache <- function() cache
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
## The following function calculates the inverse matrix of the special "matrix"
## created with the makeCacheMatrix.
## 1. It first checks to see if the inverse has already been calculated.
## 2. If so, it gets the value from cache and skips the computation.
## 3. Otherwise, it calculates the inverse matrix and sets the value of the cache
cacheSolve <- function(x, ...) {
cached_data <- x$getcache()
if(!is.null(cached_data)) {
message("getting cached data")
return(cached_data)
}
data <- x$get()
cache <- solve(data, ...)
x$setcache(cache)
cache
}
a <-makeCacheMatrix()       # assigns function to a
x <- matrix(c(4,2,7,6),2,2) # assigns a matrix to x (also tested a 3x3 and it worked)
a$set(x)                    # passes x to the set function
cacheSolve(a)               # passes a to cachesolve; cache is null, so calculates inverse at sets it
?ppois
ppois(40,lambda = 45)
?poisson.test
poisson.test(600,60)
ppois(10,3)
ppois(10,lambda=15)
qt(.95,8)
rm(list=ls())
x <- c(140,138,150,148,135)
y <- c(132,135,151,146,130)
mu0 <- mean(x)
mua <- mean(y)
sigma0 <- sd(x)
sigmaa <- sd(y)
power.t.test
?power.t.test
diff <- mua-mu0
power.t.test(n=5,delta=diff,sd=sigma0,type = "two.sample",alternative="two.sided")$power
sigmap <- sd(c(x,y))
power.t.test(n=5,delta=diff,sd=sigmap,type = "two.sample",alternative="two.sided")$power
rm(list=ls())
n <- 4
coke <- 3
pepsi <- 1
mua <- 3/4
x <- c(1,1,1,0)
sigma <- sd(x)
power.t.test(n=4,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
mu0 <- 0.5
power.t.test(n=4,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
sigma <- sd(x)
power.t.test(n=4,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
se <- sigma/(n)^.5
t <- pt(.95,3)
t <- pt(.05,3)
?pt
t <- pt(.05,3,lower.tail=FALSE)
t <- pt(.95,3,lower.tail=FALSE)
t <- qt(.95,3)
stat <- (mua - mu0)/se
?power.t.test
power.t.test(n=1787,delta=10/1787-1/100,sd=sqrt(10/1787),type="one.sample",alternative="one.sided")$power
delta = 10/1787-1/100
power.t.test(n=1787,delta=delta,sd=sqrt(10/1787),type="one.sample",alternative="one.sided")$power
rm(list=ls())
mu0 = 1/100
mua = 1/1787
delta = mua - mu0
mua = 10/1787
delta = mua - mu0
power.t.test(n=1787,delta=delta,sd=sqrt(mua),type="one.sample",alternative="one.sided")$power
?ppois
ppois(delta/sqrt(mua/1787),mua)
pnorm(mu0-qnorm(.95)*sqrt(mua/1787),mean=mua,sd=sqrt(mua),lower.tail = TRUE)
rm(list=ls())
n <- 18
mu0 <- 1
rm(list=ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
u <- c(1.077,.3,.0025,.1471)
?aggregate
s1 <- w*(x-u[1])^2
s1 <-sum(w*(x-u[1])^2)
m(w*(x-u[2])^2)
s3 <-sum(w*(x-u[3])^2)
s4 <-sum(w*(x-u[4])^2)
s2 <-sum(w*(x-u[2])^2)
s3 <-sum(w*(x-u[3])^2)
s4 <-sum(w*(x-u[4])^2)
rm(list=ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(y~x-1)
lm(y~x)
data(mtcars)
rm(c(x,y))
rm(x,y)
mtcars
head(mtcars)
head(mtcars[,2])
head(mtcars[,1])
y <- mtcars[,1]
x <- mtcars[,6]
head(mtcars[,6])
lm(y~x)
rm(list=ls())
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mu <- mean(x)
sd <- sd(x)
xnorm <- (x-mu)/sd
rm(list=ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
rm(list=ls())
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- mean(x)
rm(list=ls())
x <- c(140,138,150,148,135)
y <- c(132,135,151,146,130)
mu0 <- mean(x)
mua <- mean(y)
sigma0 <- sd(x)
sigmaa <- sd(y)
sigmap <- sd(c(x,y))
diff <- mua-mu0
power.t.test(n=5,delta=diff,sd=sigmap,type = "two.sample",alternative="two.sided")$power
power.t.test(n=5,delta=diff,sd=sigma0,type = "two.sample",alternative="two.sided")$power #0.0896
z <- qnorm(1-.05/2)
pnorm(mu0+z*sigma0/sqrt(5),mean=mu0,sd=sigma0/sqrt(5),lower.tail=TRUE)
pnorm(mu0+z*sigma0/sqrt(5),mean=mu0,sd=sigma0/sqrt(5),lower.tail=FALSE)
pnorm(mu0+z*sigma0/sqrt(5),mean=mua,sd=sigmaa/sqrt(5),lower.tail=FALSE)
power.t.test(n=5,delta=diff,sd=sigmaa,type = "two.sample",alternative="two.sided")$power #0.0896
power.t.test(n=5,delta=diff,sd=sigmap,type = "two.sample",alternative="one.sided")$power #0.0896
power.t.test(n=5,delta=diff,sd=sigma0,type = "two.sample",alternative="one.sided")$power #0.1098
power.t.test(n=5,delta=diff,sd=sigmaa,type = "two.sample",alternative="one.sided")$power #0.0746
power.t.test(n=5,delta=diff,sd=sigmap,type = "one.sample",alternative="one.sided")$power #0.0111
power.t.test(n=5,delta=diff,sd=sigma0,type = "one.sample",alternative="one.sided")$power #0.0080
power.t.test(n=5,delta=diff,sd=sigmaa,type = "one.sample",alternative="one.sided")$power #0.0145
diff2 <- y - x
mn <- mean(diff2)
s <- sd(diff2)
n <- length(x)
ci <- mn + c(-1,1)*qt(0.975,n-1)*s/sqrt(n)
data(sleep)
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
?ggplot
?aes
g <- ggplot(c(x,y), aes(x = c(0,1), y = c(x,y))
g <- ggplot(c(x,y), aes(x = c(0,1), y = c(x,y)))
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
sleep
c <- 1:10
g <- ggplot(c(c,x,y), aes(x = c(0,1), y = c(x,y),group=c))
df <- data.frame(c(c,x,y))
?data.frame
df <- data.frame(cbind(c,x,y))
g <- ggplot(df, aes(x = c(0,1), y = rbind(x,y),group=c))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
g <- g + geom_line(size = 1, aes(colour = c)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
c <- rbind(c,c)
c <- 1:10
c <- rbind(c,c)
c
c <- cbind(c,c)
c
?repeat
??repeat
c <- r(1:10)
c <- 1:10 & 1:10
c <- 1:10
?rep
c <- rep(1:10,2)
c
group[1:10] <- rep(1,10)
?dim
dim(group) <- c(20,1)
group <- c(rep(1,10),rep(2,10)
group <- c(rep(1,10),rep(2,10))
y2 <- c(x,y)
df <- data.frame(cbind(group,c,y2))
g <- ggplot(df, aes(x = group, y = y2,group=c))
g <- g + geom_line(size = 1, aes(colour = c)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
df
c <- rep(1:5,2)
group <- c(rep(1,5),rep(2,5))
y2 <- c(x,y)
df <- data.frame(cbind(group,c,y2))
g <- ggplot(df, aes(x = group, y = y2,group=c))
g <- g + geom_line(size = 1, aes(colour = c)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
t.test(y,x,paired=TRUE)$power
?t.test
t.test(y,x,paired=TRUE)$p.value
rm(list=ls())
n <- 9
mu0 <- 1100
sd0 <- 30
?qt
ci <- mu0 + c(-1,1)*qt(0.975,n-1)*sd0/sqrt(n)
rm(list=ls())
n <- 4
coke <- 3
pepsi <- 1
mu0 <- 0.5
mua <- 3/4
x <- c(1,1,1,0)
sigma <- sd(x)
se <- sigma/(n)^.5
t <- qt(.95,3)
power.t.test(n=4,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
stat <- (mua - mu0)/se
se <- sigma/sqrt(n)
power.t.test(n=n,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
stat <- (mua - mu0)/se
coke <- c(1,1,1,0)
pepsi <- c(0,0,0,1)
mu_coke <- mean(coke)
rm(mua)
rm(x,y)
rm(x)
sigma_coke <- sd(coke)
rmsigma_coke)
rm(sigma_coke)
sigma <- sqrt(mu0*(1-mu0))
t <- qt(.95,n-1)
power.t.test(n=n,delta=mua-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
power.t.test(n=n,delta=mu_coke-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power
rm(list=ls())
n <- 4
coke <- c(1,1,1,0)
pepsi <- c(0,0,0,1)
mu0 <- 0.5
mu_coke <- mean(coke)
# assuming bernoulli distribution
sigma <- sqrt(mu0*(1-mu0))
t <- qt(.95,n-1)
power.t.test(n=n,delta=mu_coke-mu0, sd=sigma,type="one.sample",alternative="one.sided")$power #.196
z <- qnorm(1-.05)
pnorm(mu0+z*sigma/sqrt(n),mean=mu0,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n),mean=mu_coke,sd=sigma/sqrt(n),lower.tail=FALSE)
power.t.test(n=n,delta=mu_coke-mu0, sd=sigma/sqrt(n),type="one.sample",alternative="one.sided")$power #.196
t.test(coke,pepsi,paired=FALSE,var.equal=TRUE)$p.value
pbinom(2,size=n,prob=mu0,lower.tail=FALSE)
t.test(coke,pepsi,paired=FALSE,var.equal=FALSE)$p.value # 0.207
t.test(mu_coke,mua,paired=FALSE,var.equal=FALSE)$p.value # 0.207
t.test(mu_coke,mu0,paired=FALSE,var.equal=FALSE)$p.value # 0.207
t.test(mu_coke,mu0)$p.value # 0.207
rm(list=ls())
?pbinom
choose(n,3)*(mu0^3)*(1-mu0)^(n-3)+choose(n,4)*(mu0^4)*(1-mu0)^(n-4)
n <- 4
mu0 <- 0.5
choose(n,3)*(mu0^3)*(1-mu0)^(n-3)+choose(n,4)*(mu0^4)*(1-mu0)^(n-4)
rm(list=ls())
# assume poisson (because count/rate data and sd not given)
mu0 = 1/100
mua = 10/1787
delta = mua - mu0
power.t.test(n=1787,delta=delta,sd=sqrt(mua),type="one.sample",alternative="one.sided")$power #didn't give correct answer
ppois(delta/sqrt(mua/1787),mua) # didn't give correct answer
pnorm(mu0-qnorm(.95)*sqrt(mua/1787),mean=mua,sd=sqrt(mua),lower.tail = TRUE)
power.t.test(n=1787,delta=delta,sd=sqrt(mu0),type="one.sample",alternative="one.sided")$power #didn't give correct answer
pnorm(mu0-qnorm(.95)*sqrt(mua/1787),mean=mu0,sd=sqrt(mu0),lower.tail = TRUE)
ppois(delta/sqrt(mua/1787),mu0) # didn't give correct answer
mu0 = 1/100*1787
mua = 10
delta = mua - mu0
ppois(mua-1,mu0,lower.tail=FALSE) # didn't give correct answer
ppois(mua,mu0,lower.tail=FALSE) # didn't give correct answer
ppois(mua,mu0,lower.tail=TRUE) # didn't give correct answer
rm(list=ls())
sdp <- sqrt((sd0^2)*.5+(sda^2)*.5)
n <- 18
mu0 <- 1
mua <- -3
sd0 <- 1.8
sda <- 1.5
sdp <- sqrt((sd0^2)*.5+(sda^2)*.5)
diff <- mua-mu0
ts <- diff +c(-1,1)*qt(.975,n-2)*sdp*sqrt((1/(n/2)+1/(n/2)))
ts <- diff+c(-1,1)*qt(.95,n-2)*sdp*sqrt((1/(n/2)+1/(n/2))) #-5.66 to -2.34 (contains diff)
ts <- diff+c(-1,1)*qt(.995,n-2)*sdp*sqrt((1/(n/2)+1/(n/2))) #-5.66 to -2.34 (contains diff)
rm(list=ls())
n <- 9
rm(list=ls())
n <- 100
power.t.test(n=n,delta=mua,sd=sdp,type="one.sample",alt="one.sided")$power
mu0 <- 0
mua <- .01
sdp <- 0.04
power.t.test(n=n,delta=mua,sd=sdp,type="one.sample",alt="one.sided")$power
rm(list=ls())
mua <- 0.01
sdp <- 0.04
mu0 <- 0
power.t.test(delta=mua,sd=sdp,type="one.sample",alt="one.sided",power=.9)$n
rm(list=ls())
n <- 228
mua <- 44
nm <- 228
ng <- 228
rm(n)
rm(mua)
mum <- 44
mug <- 42.04
sdp <- 12
z <- (mum-mug)/(sdp/sqrt(n*2))
z <- (mum-mug)/(sdp/sqrt(nm+ng))
pnorm(z)
?pnorm
(1-pnorm(z))*2
z <- (mum-mug)/(sdp/sqrt(nm))
(1-pnorm(z))*2
z <- (mum-mug)/(sdp/sqrt(nm+ng))
(1-pnorm(z))*2
pnorm(z)
qnorm(pnorm(z))
qnorm(.9)
qnorm(..95)
qnorm(.95)
pnorm(z)
qnorm(.975)
rm(list = ls())		# nothing up your sleeve
install.packages("shinyapps")
library(shiny)
library(shinyapps)
getwd()
setwd("C:/Users/Dpmoore3/Documents/GitHub/Data_Products_Repo")
setwd("C:/Users/Dpmoore3/Documents/GitHub/Data_Products-Repo")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("C:/Users/Dpmoore3/Documents/GitHub/Data_Products-Repo/Temperature_conversion")
slidify("index.Rmd")
library(knitr)
browseURL('index.html')
slidify("index.Rmd")
publish(user="dpmoore3", repo = "https://github.com/dpmoore3/Data_Products-repo")
publish(user="dpmoore3", repo = "Data_Products-repo")
getwd()
publish(user="dpmoore3",repo="Slidify")
publish(user="dpmoore3",repo="Slidify")
